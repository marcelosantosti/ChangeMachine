<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dlp.Framework</name>
    </assembly>
    <members>
        <member name="T:Dlp.Framework.ByteExtensions">
            <summary>
            Byte array extension methods.
            </summary>
        </member>
        <member name="M:Dlp.Framework.ByteExtensions.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts a byte array to string.
            </summary>
            <param name="source">Byte array to be converted.</param>
            <param name="encoding">Encoding to be used for conversion. Default value: Encoding.UTF8.</param>
            <returns>Return a new string generated from byte array, or null, if a invalid byte array is received.</returns>
            <example>
      <para>The following example shows how to convert a byte array to string using the extension method.</para>
      <code lang="C#">
        // String to be converted to a byte array.
        string source = "source string";
        
        // Create a byte array from a string, using the StringExtensions.GetByte() extension method.
        byte[] data = source.GetBytes();
        
        // Convert the byte array back to string, using whe ByteExtensions.GetString() extension method.
        string result = data.GetString();

        Console.WriteLine(result);

        // Output: source string
      </code>
    </example>
        </member>
        <member name="T:Dlp.Framework.CollectionExtensions">
            <summary>
            Collections extension methods.
            </summary>
        </member>
        <member name="M:Dlp.Framework.CollectionExtensions.AsString(System.Collections.IEnumerable,System.Char,System.String)">
            <summary>
            Converts a collection into a string, where each element is separated with a comma, by default.
            </summary>
            <param name="source">Collection to be converted.</param>
            <param name="separator">Char separator. The defalt separator is comma.</param>
            <param name="surroundWith">Specify the surrounding chars for the elements. For example.: single quotation mark "'": 'element1','element2',...</param>
            <returns>Returns a new string containing all the elements received, or null, if the source collection is null.</returns>
            <example>
      <para>The following example shows how to convert a IEnumerable&lt;int&gt; into a string separated by commas.</para>
      <code lang="C#">
        // Create a collection with 4 elements.
        IEnumerable&lt;int&gt; idCollection = new[] int { 1, 2, 3, 4 };

        // Convert the collection to a string.
        string result = idCollection.AsString();

        Console.WriteLine(result);

        // Output: 1,2,3,4
      </code>
      <para>The following example shows how to convert a List&lt;string&gt; into a string where each element is separated by a semi-colon and surrounded with sigle quotation marks.</para>
      <code lang="C#">
        // List to hold names.
        List&lt;string&gt; nameCollection = new List&lt;string&gt;();

        nameCollection.Add("First Name");
        nameCollection.Add("Middle Name");
        nameCollection.Add("Last Name");

        // Convert the collection to a string.
        string result = nameCollection.AsString(';', "'");

        Console.WriteLine(result);

        // Output: 'First Name';'Middle Name';'Last Name'
      </code>
    </example>
        </member>
        <member name="P:Dlp.Framework.Container.AbstractComponentInfo.InterfaceType">
            <summary>
            Gets the interface type to be registered.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.AbstractComponentInfo.InterceptorCollection">
            <summary>
            Gets all the interceptors associated with the interface to be registered.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.AbstractComponentInfo.ComponentDataCollection">
            <summary>
            Gets all the implemented types for the interface to be registered.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.AbstractComponentInfo.ResolveDependencies">
            <summary>
            Gets or sets the flag defining whether the properties of this type that are registeres should be automatically resolved.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.AbstractComponentInfo.ActualInterceptorCollection">
            <summary>
            Gets the interceptors registered for the interface type.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.AbstractComponentInfo.ActualComponentDataCollection">
            <summary>
            Gets the collection of components that implements the interface.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.AssemblyInfo.Interceptor``1">
            <summary>
            Associates an interceptor to be executed when any method of the interface is called.
            To create an interceptor, a class must implements the IInterceptor interface.
            </summary>
            <typeparam name="TInterceptor">Type of the class that is going to intercept the requests.</typeparam>
            <returns>Returns an instance of RegistrationInfo to be registered with the IocFactory.</returns>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.IInvocation.Arguments">
            <summary>
            Gets the arguments passed to the invoked method.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.IInvocation.GenericArguments">
            <summary>
            Gets the method generic arguments.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.IInvocation.MethodInvocationTarget">
            <summary>
            Gets the information of the method being invoked.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.IInvocation.TargetType">
            <summary>
            Gets the type of the class that contains the invoked method.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.IInvocation.ReturnType">
            <summary>
            Gets the type of the return value.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.IInvocation.ReturnValue">
            <summary>
            Gets or sets the returned value from the invoked method.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.Interceptors.IInvocation.Proceed">
            <summary>
            Calls the next interceptor. If no more interceptors are available, call the invoked method.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.Invocation.Arguments">
            <summary>
            Gets the arguments passed to the invoked method.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.Invocation.GenericArguments">
            <summary>
            Gets the method generic arguments.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.Invocation.MethodInvocationTarget">
            <summary>
            Gets the information of the method being invoked.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.Invocation.TargetType">
            <summary>
            Gets the type of the class that contains the invoked method.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.Invocation.ReturnType">
            <summary>
            Gets the type of the return value.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.Interceptors.Invocation.ReturnValue">
            <summary>
            Gets or sets the value returned by the invoked method.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.Interceptors.Invocation.Proceed">
            <summary>
            Calls the next interceptor. If no more interceptors are available, call the invoked method.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.IDynamicProxy.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[],System.Type[])">
            <summary>
             Method that gets called from within the proxy instance. 
            </summary>
            <param name="proxy">Instance of proxy.</param>
            <param name="method">Method instance.</param>
            <param name="parameters">Parameters for the method.</param>
            <param name="genericArguments">List of the generic types of the called method.</param>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.DynamicProxy.#ctor(System.Object,Dlp.Framework.Container.Interceptors.IInterceptor[])">
            <summary>
             Initializes a new instance of the interceptor.
            </summary>
            <param name="objectInstance">Instance of object to be proxied.</param>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.DynamicProxy.NewInstance(System.Object,Dlp.Framework.Container.Interceptors.IInterceptor[],System.Type[])">
            <summary>
             Factory method to create a new proxy instance.
            </summary>
            <param name="objectInstance">Instance of object to be proxied</param>
            <param name="interceptors">List of interceptors to be called before the actual method gets executed.</param>
            <param name="aditionalInterfaces">Aditional interfaces to be implemented by the proxy instance.</param>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.DynamicProxy.NewInstance``1(Dlp.Framework.Container.Interceptors.IInterceptor[],System.Type[])">
            <summary>
             Factory method to create a new proxy instance.
            </summary>
            <param name="interceptors">List of interceptors to be called before the actual method gets executed.</param>
            <param name="aditionalInterfaces">Aditional interfaces to be implemented by the proxy instance.</param>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.DynamicProxy.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[],System.Type[])">
            <summary>
             IDynamicProxy method that gets called from within the proxy instance. 
            </summary>
            <param name="proxy">Instance of proxy.</param>
            <param name="method">Method instance.</param>
            <param name="parameters">Parameters for the method.</param>
            <param name="genericArguments">List of the generic types of the called method.</param>
        </member>
        <member name="T:Dlp.Framework.Container.Proxies.MetaDataFactory">
            <summary>
            Factory class used to cache Types instances
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.MetaDataFactory.#ctor">
            <summary>
            Class constructor. Private because this is a static class.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.MetaDataFactory.Add(System.Type)">
            <summary>
             Method to add a new Type to the cache, using the type's fully qualified name as the key
            </summary>
            <param name="interfaceType">Type to cache</param>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.MetaDataFactory.GetMethod(System.String,System.Int32)">
            <summary>
             Method to return the method of a given type at a specified index.
            </summary>
            <param name="name">Fully qualified name of the method to return</param>
            <param name="i">Index to use to return MethodInfo</param>
            <returns>MethodInfo</returns>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.ProxyFactory.#cctor">
            <summary>
            Initialize the value type mapper. This is needed for methods with intrinsic return types, used in the Emit process.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.Proxies.ProxyFactory.GetInstance">
            <summary>
            Creates a new instance of the ProxyFactory.
            </summary>
            <returns>Returns a ProxyFactory instance.</returns>
        </member>
        <member name="T:Dlp.Framework.Container.IocFactory">
            <summary>
            Dependency Injection Container.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.IocFactory.Register(Dlp.Framework.Container.IRegistration[])">
            <summary>
            Register a component within the IocFactory.
            </summary>
            <param name="componentRegistrationCollection">The component to be registered. Create with the Component.For method.</param>
            <example>
      <para>The following example shows how to register an interface and get the registered component.</para>
      <code>
        // Register a component within the IocFactory container.
        IocFactory.Register(
        
          // Register the interface IConfigurationUtility, specifying the ConfigurationUtility class as its concrete type.
          Component.For&lt;IConfigurationutility&gt;()
            .ImplementedBy&lt;ConfigurationUtility&gt;()
        );
        
        // After the component has been registered, just use the Resolve method whenever you need to get an instance of the registered type.
        // The following line creates a new instance of the ConfigurationUtility type.
        IConfigurationUtility configurationUtility = IocFactory.Resolve&lt;IConfigurationutility&gt;();
      </code>
    </example><example>
      <para>In this example, we register three types with the same interface. For cases like this, is a good practice to give a unique name for each type that implements the interface.</para>
      <code>
        // Register a component within the IocFactory container.
        IocFactory.Register(

          // Register the interface IAcquirer, specifying every type that implements the interface.
          Component.For&lt;IAcquirer&gt;()
            .ImplementedBy&lt;Stone&gt;("Stone")
            .ImplementedBy&lt;Rede&gt;("Rede")
            .ImplementedBy&lt;Cielo&gt;("Cielo")
        );

        // To retrieve the desired type, you can use a Factory method.
        IAcquirer acquirer = AcquirerFactory.CreateAcquirer(1);
      </code>
      <para>
        The implementation of the AcquirerFactory class could be something like the following:
      </para>
      <code>
        // Acquirer fatory class.
        public static class AcquirerFactory {
        
          // Create the acquirer instance based on the acquirerCode. Pay attention to the use of the IocFactory.ResolveByName method, instead of IocFactory.Resolve.
          public static IAcquirer CreateAcquirer(int acquirerCode) {

            IAcquirer aquirer = null;

            // Validate the code for Stone acquirer.
            if (acquirerCode = 1) {
              aquirer = IocFactory.ResolveByName&lt;IAcquirer&gt;("Stone");
            }
          
            // Validates the code for Rede acquirer.
            if (acquirerCode = 2) {
              acquirer = IocFactory.ResolveByName&lt;IAcquirer&gt;("Rede");
            }

            // Validates the code for Cielo acquirer.
            if (acquirerCode = 3) {
              acquirer = IocFactory.ResolveByName&lt;IAcquirer&gt;("Cielo");
            }
          
            return acquirer;
          }
        }
      </code>
      <remarks>
        <para>
          When registering a type within an interface, if you do not specify the Name parameter, the type will be registered with System.Type.Fullname as the unique name. You can then reference any type by its fullname.
        </para>
        <para>
          Also, keep in mind that when multiple types are associated with one interface and you do not specify the name of the type to be resolved in the IocFactory.Resolve method, the first registered type will be returned.
          In the above example, if we call the 'IocFactory.Resolve&lt;IAcquirer&gt;()' method, the container is going to return a new instance of the 'Stone' type.
        </para>
      </remarks>
    </example><example>
      <para>
        Sometimes your architecture demands the use of the singleton pattern. By default, every call to the IocFactory.Resolve() method initializes a new instance of the requested type. You can define a type to be treated as singleton, with a single line of code, when registering the type.
        To do that, simply use the .AsSingleton() method after the implemented type that you want as a singleton.
      </para>
      <para>
        In the following example, the 
      </para>
      <code>
        // Register a component within the IocFactory container.
        IocFactory.Register(

          // Register the interface IAcquirer, specifying the Stone type to be treated as a singleton instance.
          Component.For&lt;IAcquirer&gt;()
            .ImplementedBy&lt;Stone&gt;().AsSingleton()
            .ImplementedBy&lt;Rede&gt;()
            .ImplementedBy&lt;Cielo&gt;()
        );
      </code>
    </example><example>
      <para>In many situations you may have to register multiples interfaces with its implementations, as for example, a set of repositories. As the next example illustrates, we have a namespace called Repository, containing several interfaces and its corresponding implementations. To register all the types from this namespace, you can proceed as follows:</para>
      <code>
        // Register a namespace within the IocFactory container.
        IocFactory.Register(

          // Register all the interfaces from the specified namespace in the current assembly.
          // We know that two of the repositories must be treated as singleton, so we can manually specify that.
          Component.FromThisAssembly("Dlp.Framework.Container.Repository")
            .AsSingleton&lt;IAcquirer&gt;()
            .AsSingleton&lt;IPaymentMethod&gt;()
        );
        
        // If we have a repository named MerchantRepository, that implements the interface IMerchantRepository, then creating a new instance is as simple as calling the Resolve method.
        IMerchantRepository merchantRepository = IocFactory.Resolve&lt;IMerchantRepository&gt;();
      </code>
      <remarks>
        If you need to register types from another assembly, as for example, the repository is in another project, simply use the Component.FromAssembly, specifying the assembly where the types interfaces to be registered are.
      </remarks>
    </example><example>
      <para>
        One of the advantages of most of the Dependency Injection Containers is the ability to intercept calls to any method of the registered interfaces. The IocFactory provides this funcionality in a easy way.
        The first thing is to create a class that implements the Dlp.Framework.Container.Interceptors.IInterceptor interface. This interface provides two methods, as shown in the following example.
      </para>
      <code>
        using System;
        using System.Linq;
        using Dlp.Framework.Connector.Interceptors;

        public sealed class MyInterceptor : IInterceptor {

          // The BeforeCall method is called before the method of the registered type is executed.
          public object BeforeCall(IInterceptorInput interceptorInput) {

            // You can check and edit the params received in the interceptorInput param, before they are sent to the requested method.
            
            // The value that you specify here will be passed to the parameter correlationState of the AfterCall method.
            return null;
          }

          // The AfterCall method is called after the method is executed. The correlationState param contains the data that you returned at the BeforeCall method.
          public void AfterCall(IInterceptorOutput interceptorOutput, object correlationState) {
            
            // You can check and edit the values returned by the original method in the interceptorOutput param, before they are returned to the application.
          }
        }
      </code>
      <para>Having the interceptor class created, you can define the interceptor to be used for every registered interface. The following example will result in every call to any method of the interface IAcquirer to be intercepted by the MyInterceptor class.</para>
      <code>
        // Register a namespace within the IocFactory container.
        IocFactory.Register(

          // Register the interface IAcquirer, specifying the MyInterceptor to intercept any method call for that interface.
          Component.For&lt;IAcquirer&gt;()
            .ImplementedBy&lt;Stone&gt;()
            .ImplementedBy&lt;Rede&gt;()
            .ImplementedBy&lt;Cielo&gt;()
            .Interceptor&lt;MyInterceptor&gt;()
        );
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.Container.IocFactory.Reset">
            <summary>
            Clears all the registered data and interceptors.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.IocFactory.Resolve``1(System.Object[])">
            <summary>
            Gets the class registered with the provided interface. If multiple types are associated with the interface, the first registered type is returned.
            </summary>
            <typeparam name="TInterface">Interface type.</typeparam>
            <param name="constructorParameters">If the concrete class needs any parameter to be instantiated, specify them here.</param>
            <returns>Returns an instance for the specified interface type.</returns>
            <exception cref="T:System.InvalidOperationException">Either the specified interface is not registered or there aren't any concrete types associated with the interface.</exception>
            <example>
      <para>
        The following example shows how to create an instance for a registered interface, using the IocFactory.Resolve method.
      </para>
      <code>
        // Creates a new instance of the ConfigurationUtility type that implements the IConfigurationUtility interface.
        IConfigurationUtility configurationUtility = IocFactory.Resolve&lt;IConfigurationUtility&gt;();
      </code>
      <remarks>
        The IocFactory.Resolve method always creates a new instance of the requested type. If you want to keep the same instance for every call, you must register the type as a singleton.
        Check the IocFactory.Register method to learn how to register types as singletons.
      </remarks>
    </example><example>
      <para>
        Sometimes the type to be instantiated needs some parameters in its constructor. The IocFactory.Resolve method allows you to pass parameters to the constructor of the type to be instantiated.
        The next example shows how to instantiate a repository that requires the connection string to be set in the constructor.
      </para>
      <code>
        // Gets the utility to access the web.config file.
        IConfigurationUtility configurationUtility = IocFactory.Resolve&lt;IConfigurationUtility&gt;();
        
        // Retrieves the connection string.
        string connectionString = configurationUtility.ConnectionString;
        
        // Instantiate the MerchantRepository setting the connectionString variable as a parameter for the constructor's type.
        IMerchantRepository merchantRepository = IocFactory.Resolve&lt;IMerchantRepository&gt;(connectionString);
      </code>
    </example><example>
      <para>
        Another common situation occurs when a type needs another type as a constructor parameter. If both types are registered within the IocFactory container, this relationship is resolved automatically.
        The following example illustrates this scenario.
      </para>
      <code>
        // Interface providing access to elements of the web.config.
        public interface IConfigurationUtility {

          // Gets the connection string for the application.
          string ConnectionString { get; }

          // Gets the database connection timeout.
          int ConnectionTimeoutInSeconds { get; }
        }
      </code>
      <code>
        // Type that implements the IConfigurationUtilityInterface.
        public sealed class ConfigurationUtility : IConfigurationUtility {

          // Default constructor.
          public ConfigurationUtility() { }

          // Implementation of the property provided by the interface. Retrieves the connection string from the web.config.
          public string ConnectionString {
            get { return ConfigurationManager.ConnectionStrings["DatabaseConnection"].ConnectionString; }
          }

          // Implementation of the property provided by the interface. Retrieves the connection timeout from the web.config.
          public int ConnectionTimeoutInSeconds {
            get { return Convert.ToInt32(ConfigurationManager.AppSettings["ConnectionTimeout"]); }
          }
        }
      </code>
      <code>
        // Abstract class to be inherited by all the repositories.
        public abstract class AbstractRepository {

          // Constructor to be inherited by all the repositories.
          protected AbstractRepository(IConfigurationUtility configurationUtility) {

            this.ConfigurationUtility = configurationUtility;
          }

          // Stores the ConfigurationUtility instance.
          private IConfigurationUtility ConfigurationUtility { get; set; }

          // Exposes the connection string for the children classes.
          protected string ConnectionString {
            get { return this.ConfigurationUtility.ConnectionString; }
          }

          // Exposes the connection timeout for the children classes.
          protected int ConnectionTimeoutInSeconds {
            get { return this.ConfigurationUtility.ConnectionTimeoutInSeconds; }
          }
        }
      </code>
      <code>
        // Interface to be implemented by the MerchantRepository.
        public interface IMerchantRepository {
        
          // Gets the merchant name, given the merchantId.
          string GetMerchantName(int merchantId);
        }
      </code>
      <code>
        // Class that implements the IMerchantRepository interface.
        public sealed class MerchantRepository : AbstractRepository, IMerchantRepository {
        
          // Constructor that receives an instance of IConfigurationUtility.
          public MerchantRepository(IConfigurationUtility configurationUtility) : base(configurationUtility) { }
          
          // Implementation of the GetMerchantName method.
          public string GetMerchantName(int merchantId) {
          
            // Query to be used for searching the merchant.
            string queryString = "SELECT MerchantName FROM Merchant WHERE MerchantId = @MerchantId";
          
            using(DatabaseConnector databaseConnector = new DatabaseConnector(this.ConnectionString, this.ConnectionTimeoutInSeconds)) {
              
              return databaseConnector.ExecuteScalar&lt;string&gt;(queryString, new { MerchantId = merchantId });
            }
          }
        }
      </code>
      <para>
        The above structure is a common pattern when working with repositories.
        Pay attention to the MerchantRepository class and note that it does not have a default constructor. It contains only a constructor that receives the IConfigurationUtility interface.
        The following example shows how to register and retrieves that repository.
      </para>
      <code>
        public static void main() {
        
          // Register the IConfigurationUtility interface and its implementation as a singleton.
          IocFactory.Register(
            Component.For&lt;IConfigurationUtility&gt;()
              ImplementedBy&lt;ConfigurationUtility&gt;().AsSingleton()
          );
          
          // Register the IMerchantRepository interface and its implementation.
          IocFactory.Register(
            Component.For&lt;IMerchantRepository&gt;()
              ImplementedBy&lt;MerchantRepository&gt;()
          );
          
          // Here we resolve the IMerchantRepository so we can use its methods.
          // Note that we do not need to inform the parameters for the MerchantRepository constructor, because the parameter is a registered interface (IConfigurationUtility).
          // The container automatically checks and search for an appropriated constructor.
          IMerchantRepository merchantRepository = IocFactory.Resolve&lt;IMerchantConfiguration&gt;();
          
          // Gets the name for the merchantId 1.
          string merchantName = merchantRepository.GetMerchantName(1);
        }
      </code>
      <remarks>
        Keep in mind that for this pattern to work, your class shall not contains the default constructor. If you class contains a default constructor, it is going to have preference when resolving the interface.
        If that is the case, you have to explicitly pass the instanced type as a constructor parameter for the IocFactory.Resolve method.
      </remarks>
    </example>
        </member>
        <member name="M:Dlp.Framework.Container.IocFactory.ResolveByName``1(System.String,System.Object[])">
            <summary>
            Gets the class registered with the provided interface, by its name.
            </summary>
            <typeparam name="TInterface">Interface type.</typeparam>
            <param name="name">Unique name of the type to be returned.</param>
            <param name="constructorParameters">If the concrete class needs any parameter to be instantiated, specify them here.</param>
            <returns>Returns an instance for the specified interface type.</returns>
            <exception cref="T:System.InvalidOperationException">Either the specified interface is not registered or there aren't any concrete types associated with the interface.</exception>
        </member>
        <member name="M:Dlp.Framework.Container.IRegistration.Register">
            <summary>
            Method used internally to register the interfaces.
            </summary>
            <returns>Returns an IRegistrationInfo array with all the data to be registered.</returns>
        </member>
        <member name="P:Dlp.Framework.Container.IRegistrationInfo.InterfaceType">
            <summary>
            Gets the registered interface type.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.IRegistrationInfo.InterceptorCollection">
            <summary>
            Gets all the interceptors for the interface to be registered.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.IRegistrationInfo.ComponentDataCollection">
            <summary>
            Gets all the components data for the interface to be registered.
            </summary>
        </member>
        <member name="P:Dlp.Framework.Container.IRegistrationInfo.ResolveDependencies">
            <summary>
            Gets or sets the flag that informs whether any type or property contained within this type should be resolved automatically.
            </summary>
        </member>
        <member name="T:Dlp.Framework.Container.Component">
            <summary>
            Represents a component to be registered within the container.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.Component.For``1">
            <summary>
            Prepares the interface to be registered. Use this method to register types at the IocFactory.Register method.
            </summary>
            <typeparam name="TInterface">Type of the interface to be registered.</typeparam>
            <returns>Returns an instance of ComponentInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="M:Dlp.Framework.Container.Component.FromThisAssembly(System.String)">
            <summary>
            Load all the types from the specified namespace for the assembly that is calling this method, to be registered at the IocFactory.Register method.
            </summary>
            <param name="namespace">Namespace containing the types to be registered.</param>
            <returns>Returns an instance of AssemblyInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="M:Dlp.Framework.Container.Component.FromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Load all the types from the specified namespace for the specified assembly, to be registered at the IocFactory.Register method.
            </summary>
            <param name="assembly">Assembly containing the types to be registered.</param>
            <param name="namespace">Namespace containing the types to be registered.</param>
            <returns>Returns an instance of AssemblyInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="P:Dlp.Framework.Container.ComponentInfo`1.LastRegisteredComponentData">
            <summary>
            Gets the last registered component data.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Container.ComponentInfo`1.ImplementedBy``1(System.String)">
            <summary>
            Associates a concrete class with the specified interface.
            </summary>
            <typeparam name="TConcrete">Type of the concrete class to be associated.</typeparam>
            <returns>Returns an instance of ComponentInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="M:Dlp.Framework.Container.ComponentInfo`1.IsSingleton">
            <summary>
            Defines the last registered concrete type as a singleton.
            </summary>
            <returns>Returns an instance of ComponentInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="M:Dlp.Framework.Container.ComponentInfo`1.IsDefault">
            <summary>
            Defines the last registered concrete type as the default type to be instantiated, when multiple types are associated to the same interface.
            </summary>
            <returns>Returns an instance of ComponentInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="M:Dlp.Framework.Container.ComponentInfo`1.ResolveDependencies">
            <summary>
            Informs that any type or property contained within this type should be resolved automatically.
            </summary>
            <returns>Returns an instance of ComponentInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="M:Dlp.Framework.Container.ComponentInfo`1.Interceptor``1">
            <summary>
            Associates an interceptor to be executed when any method of the interface is called.
            To create an interceptor, a class must implements the IInterceptor interface.
            </summary>
            <typeparam name="TInterceptor">Type of the class that is going to intercept the requests.</typeparam>
            <returns>Returns an instance of ComponentInfo to be registered with the IocFactory.Register method.</returns>
        </member>
        <member name="M:Dlp.Framework.Container.WcfServiceHostFactory.InitializeComponents">
            <summary>
            Initializes and register the components within the IocFactory inside this method.
            </summary>
        </member>
        <member name="T:Dlp.Framework.DateTimeExtensions">
            <summary>
            DateTime extension methods.
            </summary>
        </member>
        <member name="M:Dlp.Framework.DateTimeExtensions.ChangeTimeZone(System.DateTime,System.String,System.String)">
            <summary>
            Converts a DateTime object to the specified TimeZoneId. The converted date considers the Daylight Saving Time automatically.
            </summary>
            <param name="source">DateTime object to be converted.</param>
            <param name="sourceTimeZoneId">TimeZoneId for the current DateTime object.</param>
            <param name="targetTimeZoneId">Target TimeZoneId to witch the DateTime will be converted.</param>
            <returns>Return a new DateTime object with the specified target TimeZoneId.</returns>
            <remarks>
      To get a list of all the available TimeZones, check the <see cref="M:Dlp.Framework.DateTimeExtensions.SystemTimeZones" /> method.
    </remarks><example>
      <para>The following example shows how to convert a DateTime object between different time zones.</para>
      <code lang="C#">
        // Current local DateTime for time of Brasília/Brazil.
        DateTime brasiliaDateTime = DateTime.Now;

        // Convert the DateTime with Brasília time zone to a new DateTime from Hawaii time zone.
        DateTime hawaiiDateTime = brasiliaDateTime.ChangeTimeZone("E. South America Standard Time", "Hawaiian Standard Time");
      </code>
      <para>The following example shows how to convert UTC DateTime to a specific time zone.</para>
      <code lang="C#">
        // Convert the UTC current DateTime to Brasília time zone.
        DateTime brasiliaDateTime = DateTime.UtcNow.ChangeTimeZone(TimeZoneInfo.Utc.Id, "E. South America Standard Time");
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.DateTimeExtensions.ToIso8601String(System.DateTime)">
            <summary>
            Converts a DateTime object to a ISO8601 string. Very useful for REST operation contracts.
            </summary>
            <param name="source">DateTime object to be converted.</param>
            <returns>Return the date and time in ISO8601 format.</returns>
            <example>
      <para>The following example shows how to convert a DateTime object to an ISO 8601 standard string.</para>
      <code lang="C#">
        // Current local DateTime.
        DateTime localDateTime = DateTime.Now;

        // Convert the DateTime to a ISO 8601 string.
        string result = localDateTime.ToIso8601String();
        
        Console.WriteLine(result);
        
        // Output: 2014-10-02T16:45:32
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>
            Converts a DateTime object to the Unix time format, represented by the number of seconds since 01/01/1970.
            </summary>
            <param name="source">DateTime object to be converted.</param>
            <returns>Return the number of seconds since 01/01/1970.</returns>
        </member>
        <member name="M:Dlp.Framework.DateTimeExtensions.SystemTimeZones">
            <summary>
            Get all the availables TimeZones, with its Id and Display Name. Useful for display in ComboBoxes or ListBoxes.
            </summary>
            <returns>Return a dictionaty with the Id as the Key and the Display Name as the value.</returns>
        </member>
        <member name="T:Dlp.Framework.SendMailErrorEventHandler">
            <summary>
            Delegate for exceptions occurred when sending a mail message.
            </summary>
            <param name="sender">Object that raised the exception.</param>
            <param name="e">Information abount the error.</param>
        </member>
        <member name="E:Dlp.Framework.IMailService.OnSendMailError">
            <summary>
            Event fired when an exception occurs when sending an email message.
            </summary>
        </member>
        <member name="M:Dlp.Framework.IMailService.SendEmailAsync(Dlp.Framework.IMailServerConfiguration,Dlp.Framework.IMailContent)">
            <summary>
            Sends a mail message async.
            </summary>
            <param name="mailServerConfiguration">The mail account and smtp configuration.</param>
            <param name="mailContent">The mail message content.</param>
        </member>
        <member name="M:Dlp.Framework.IMailService.SendEmail(Dlp.Framework.IMailServerConfiguration,Dlp.Framework.IMailContent)">
            <summary>
            Sends a mail message.
            </summary>
            <param name="mailServerConfiguration">The mail account and smtp configuration.</param>
            <param name="mailContent">The mail message content.</param>
        </member>
        <member name="T:Dlp.Framework.MailService">
            <summary>
            Mail service utility.
            </summary>
        </member>
        <member name="E:Dlp.Framework.MailService.OnSendMailError">
            <summary>
            Event fired when an exception occurs when sending an email message.
            </summary>
        </member>
        <member name="M:Dlp.Framework.MailService.SendEmailAsync(Dlp.Framework.IMailServerConfiguration,Dlp.Framework.IMailContent)">
            <summary>
            Sends a mail message async.
            </summary>
            <param name="mailServerConfiguration">The mail account and smtp configuration.</param>
            <param name="mailContent">The mail message content.</param>
        </member>
        <member name="M:Dlp.Framework.MailService.SendEmail(Dlp.Framework.IMailServerConfiguration,Dlp.Framework.IMailContent)">
            <summary>
            Sends a mail message.
            </summary>
            <param name="mailServerConfiguration">The mail account and smtp configuration.</param>
            <param name="mailContent">The mail message content.</param>
        </member>
        <member name="T:Dlp.Framework.SendMailErrorEventArgs">
            <summary>
            Class that represents an error ocurred when sending a mail message.
            </summary>
        </member>
        <member name="M:Dlp.Framework.SendMailErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the SendMailErrorEventArgs class.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:Dlp.Framework.SendMailErrorEventArgs.Exception">
            <summary>
            Gets the exception occurred when sending the mail message.
            </summary>
        </member>
        <member name="T:Dlp.Framework.MailContent">
            <summary>
            Class that represents an email object to be sent.
            </summary>
        </member>
        <member name="M:Dlp.Framework.MailContent.#ctor">
            <summary>
            Initializes a new instance of the MailContent class.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailContent.Subject">
            <summary>
            Gets or sets the mail subject.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailContent.Body">
            <summary>
            Gets or sets the mail body message.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailContent.DisplayName">
            <summary>
            Gets or sets the display name of the sender.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailContent.ReceiverMailList">
            <summary>
            Gets or sets the mail recipients addresses.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailContent.IsBodyHtml">
            <summary>
            Gets or sets the flag indicating whether the mail body is clear text or html. Default value is false (clear text).
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailContent.Priority">
            <summary>
            Gets or sets the mail priority.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailContent.AttachmentList">
            <summary>
            Gets or sets the attachments for the mail.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailContent.Subject">
            <summary>
            Gets or sets the mail subject.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailContent.Body">
            <summary>
            Gets or sets the mail body message.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailContent.DisplayName">
            <summary>
            Gets or sets the display name of the sender.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailContent.ReceiverMailList">
            <summary>
            Gets or sets the mail recipients addresses.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailContent.IsBodyHtml">
            <summary>
            Gets or sets the flag indicating whether the mail body is clear text or html. Default value is false (clear text).
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailContent.Priority">
            <summary>
            Gets or sets the mail priority.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailContent.AttachmentList">
            <summary>
            Gets or sets the attachments for the mail.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailServerConfiguration.MailAccount">
            <summary>
            Gets or sets the mail account that will be used to send messages.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailServerConfiguration.MailAccountPassword">
            <summary>
            Gets or sets the mail account password.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailServerConfiguration.SmtpServerAddress">
            <summary>
            Gets or sets the SMTP server address.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailServerConfiguration.SmtpPort">
            <summary>
            Gets or sets the SMTP server port.
            </summary>
        </member>
        <member name="P:Dlp.Framework.IMailServerConfiguration.UseSsl">
            <summary>
            Gets or sets the flag that indicates if a SSL connection is required by the SMTP server address.
            </summary>
        </member>
        <member name="T:Dlp.Framework.MailServerConfiguration">
            <summary>
            Class that represents the mail server configuration to be used when sending messages.
            </summary>
        </member>
        <member name="M:Dlp.Framework.MailServerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the MailServerConfiguration class.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailServerConfiguration.MailAccount">
            <summary>
            Gets or sets the mail account that will be used to send messages.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailServerConfiguration.MailAccountPassword">
            <summary>
            Gets or sets the mail account password.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailServerConfiguration.SmtpServerAddress">
            <summary>
            Gets or sets the SMTP server address.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailServerConfiguration.SmtpPort">
            <summary>
            Gets or sets the SMTP server port.
            </summary>
        </member>
        <member name="P:Dlp.Framework.MailServerConfiguration.UseSsl">
            <summary>
            Gets or sets the flag that indicates if a SSL connection is required by the SMTP server address.
            </summary>
        </member>
        <member name="T:Dlp.Framework.ObjectExtensions">
            <summary>
            Object extension methods.
            </summary>
        </member>
        <member name="M:Dlp.Framework.ObjectExtensions.Clone``1(``0)">
            <summary>
            Creates a new instance of the current object without references to the original.
            </summary>
            <typeparam name="T">Type of the object to be cloned.</typeparam>
            <param name="source">Object to be cloned.</param>
            <returns>Return a new instance of T filed with the data of the original object.</returns>
            <example>
      <para>The following example shows how to clone an object.</para>
      <code lang="C#">
        
        // Instantiate a reference type.
        MerchantData merchantData = new MerchantData();
        
        // Set the name property.
        merchantData.Name = "Original Name";
        
        // Clone the merchantData object, removing all the references to original object.
        MerchantData clonedMerchantData = merchantData.Clone();

        Console.WriteLine("Original Merchant Name: " + merchantData.Name);
        Console.WriteLine("Cloned Merchant Name: " + clonedMerchantData.Name);

        // Change the name of the cloned merchant. The original merchant won't be changed.
        clonedMerchantData.Name = "New Name";

        Console.WriteLine("Original Merchant Name: " + merchantData.Name);
        Console.WriteLine("Cloned Merchant Name: " + clonedMerchantData.Name);

        /**
         * Output:
         * Original Merchant Name: Original Name
         * Cloned Merchant Name: Original Name
         * Original Merchant Name: Original Name
         * Cloned Merchant Name: New Name
         **/
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.ObjectExtensions.Clone(System.Object)">
            <summary>
            Creates a new instance of the current object without references to the original.
            </summary>
            <param name="source">Object to be cloned.</param>
            <returns>Return a new independent instance of the original object.</returns>
        </member>
        <member name="M:Dlp.Framework.ObjectExtensions.DiffProperties``1(``0,``0)">
            <summary>
            Compares all the properties that are different between two objects.
            </summary>
            <typeparam name="T">Type of the object to be verified.</typeparam>
            <param name="firstObject">First object to be checked.</param>
            <param name="secondObject">Second object to be checked.</param>
            <returns>Returns a collection of DiffProperty containing all the properties that does not match.</returns>
        </member>
        <member name="T:Dlp.Framework.DiffProperty">
            <summary>
            Class that contains the different values of a property.
            </summary>
        </member>
        <member name="M:Dlp.Framework.DiffProperty.#ctor">
            <summary>
            Instantiate the DiffProperty class.
            </summary>
        </member>
        <member name="P:Dlp.Framework.DiffProperty.PropertyName">
            <summary>
            The name of the property that does not match.
            </summary>
        </member>
        <member name="P:Dlp.Framework.DiffProperty.FirstValue">
            <summary>
            Tha value of the property in the first object.
            </summary>
        </member>
        <member name="P:Dlp.Framework.DiffProperty.SecondValue">
            <summary>
            The value of the property in the second object.
            </summary>
        </member>
        <member name="T:Dlp.Framework.HttpVerb">
            <summary>
            Enumerates the available HTTP verbs for REST communication.
            </summary>
        </member>
        <member name="F:Dlp.Framework.HttpVerb.Get">
            <summary>
            Defines a HTTP GET method.
            </summary>
        </member>
        <member name="F:Dlp.Framework.HttpVerb.Post">
            <summary>
            Defines a HTTP POST method.
            </summary>
        </member>
        <member name="F:Dlp.Framework.HttpVerb.Put">
            <summary>
            Defines a HTTP PUT method.
            </summary>
        </member>
        <member name="F:Dlp.Framework.HttpVerb.Delete">
            <summary>
            Defines a HTTP DELETE method.
            </summary>
        </member>
        <member name="F:Dlp.Framework.HttpVerb.Patch">
            <summary>
            Defines a HTTP PATCH method.
            </summary>
        </member>
        <member name="T:Dlp.Framework.HttpContentType">
            <summary>
            Enumerates the available formats for REST communication.
            </summary>
        </member>
        <member name="F:Dlp.Framework.HttpContentType.Xml">
            <summary>
            Defines that the rest communication should be made with XML format.
            </summary>
        </member>
        <member name="F:Dlp.Framework.HttpContentType.Json">
            <summary>
            Defines that the rest communication should be made with JSON format.
            </summary>
        </member>
        <member name="T:Dlp.Framework.WebResponse`1">
            <summary>
            Represents the response for a HttpWebRequest.
            </summary>
            <typeparam name="T">Type of the response of a HttpWebRequest.</typeparam>
        </member>
        <member name="M:Dlp.Framework.WebResponse`1.#ctor">
            <summary>
            Initializes a new instance of the WebResponse class.
            </summary>
        </member>
        <member name="P:Dlp.Framework.WebResponse`1.StatusCode">
            <summary>
            Gets the returned HttpStatusCode.
            </summary>
        </member>
        <member name="P:Dlp.Framework.WebResponse`1.IsSuccessStatusCode">
            <summary>
            Gets the flag that indicates whether the StatusCode represents a successful operation.
            </summary>
        </member>
        <member name="P:Dlp.Framework.WebResponse`1.ResponseData">
            <summary>
            Gets the returned data.
            </summary>
        </member>
        <member name="P:Dlp.Framework.WebResponse`1.RawData">
            <summary>
            Gets the raw string returned by the service.
            </summary>
        </member>
        <member name="T:Dlp.Framework.RestClient">
            <summary>
            REST utility for HTTP communication.
            </summary>
        </member>
        <member name="M:Dlp.Framework.RestClient.SendHttpWebRequest``1(System.Object,Dlp.Framework.HttpVerb,Dlp.Framework.HttpContentType,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Sends an Http request to the specified endpoint.
            </summary>
            <typeparam name="T">Type of the expected response. Ignored if http verb GET is used.</typeparam>
            <param name="dataToSend">Object containing the data to be sent in the request.</param>
            <param name="httpVerb">HTTP verb to be using when sending the data.</param>
            <param name="httpContentType">Content type of the transferred data.</param>
            <param name="destinationEndPoint">Endpoint where the request will be sent to.</param>
            <param name="headerCollection">Custom data to be added to the request header.</param>
            <param name="allowInvalidCertificate">When set to true, allows the request to be done even if the destination certificate is not valid.</param>
            <returns>Returns an WebResponse as a Task, containing the result of the request.</returns>
        </member>
        <member name="M:Dlp.Framework.RestClient.SendHttpWebRequestAsync``1(System.Object,Dlp.Framework.HttpVerb,Dlp.Framework.HttpContentType,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Sends an Http request to the specified endpoint asyncrounously.
            </summary>
            <typeparam name="T">Type of the expected response.</typeparam>
            <param name="dataToSend">Object containing the data to be sent in the request. Ignored if http verb GET is used.</param>
            <param name="httpVerb">HTTP verb to be using when sending the data.</param>
            <param name="httpContentType">Content type of the transferred data.</param>
            <param name="destinationEndPoint">Endpoint where the request will be sent to.</param>
            <param name="headerCollection">Custom data to be added to the request header.</param>
            <param name="allowInvalidCertificate">When set to true, allows the request to be done even if the destination certificate is not valid.</param>
            <returns>Returns an WebResponse as a Task, containing the result of the request.</returns>
        </member>
        <member name="T:Dlp.Framework.Serializer">
            <summary>
            Serialization utility for Xml and Binary formats.
            </summary>
        </member>
        <member name="M:Dlp.Framework.Serializer.BinarySerialize(System.Object)">
            <summary>
            Serialize the object to a byte array. The object to be serialized must have the [Serializable] attribute.
            </summary>
            <param name="source">Object to be serialized.</param>
            <returns>Retorna um array de bytes que representa o objeto. Retorna nulo, caso o objeto especificado seja nulo.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The specified object does not have the [Serializable] attribute.</exception>
        </member>
        <member name="M:Dlp.Framework.Serializer.BinaryDeserialize``1(System.Byte[])">
            <summary>
            Deserialize a byte array to a new instance of type T.
            </summary>
            <typeparam name="T">Type of the instance to be returned.</typeparam>
            <param name="source">Byte array to be deserialized.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the byte array is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.XmlDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            Deserializes a XML string to a new instance of type T.
            </summary>
            <typeparam name="T">Type of the instance to be returned.</typeparam>
            <param name="source">XML string to be deserialized.</param>
            <param name="encoding">Encoding to be used for deserialization. Default value: Encoding.UTF8.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the XML string is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.XmlDeserialize(System.Type,System.String,System.Text.Encoding)">
            <summary>
            Deserializes a XML string to an object instance.
            </summary>
            <param name="returnType">Type of the instance to be returned.</param>
            <param name="source">XML string to be deserialized.</param>
            <param name="encoding">Encoding to be used for deserialization. Default value: Encoding.UTF8.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the XML string is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.XmlSerialize(System.Object,System.Boolean,System.Text.Encoding)">
            <summary>
            Serialize an object to a XML string.
            </summary>
            <param name="source">Object to be converted.</param>
            <param name="indent">Set to true to generate a indented XML string. Default: false.</param>
            <param name="encoding">Encoding to be used for serialization. Default value: Encoding.UTF8.</param>
            <returns>Returns the serialized string, or null, if the source object was not suplied.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.JsonSerialize(System.Object,System.Text.Encoding)">
            <summary>
            Serializes an object to a JSON string format using the DataContractJsonSerializer class. This serializer is case sensitive and does not serialize null objects by default.
            </summary>
            <param name="source">Object to be serialized.</param>
            <param name="encoding">Encoding to be used for serialization. Default value: Encoding.UTF8.</param>
            <returns>Returns the serialized string, or null, if the source object was not suplied.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.JavaScriptSerialize(System.Object,System.Boolean)">
            <summary>
            Serializes an object to a JSON string format using the JavaScriptSerializer class. This serializer is case insensitive and allows you to choose whether or not to serialize null objects.
            </summary>
            <param name="source">Object to be serialized.</param>
            <param name="ignoreNullObjects">When set to false, null objects are going to be serialized. Default value: true.</param>
            <returns>Returns the serialized string, or null, if the source object was not suplied.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.NewtonsoftDeserialize``1(System.String)">
            <summary>
            Deserializes a JSON string to an instance of type T using the Newtonsoft Serializer.
            </summary>
            <typeparam name="T">Type of the instance to be returned.</typeparam>
            <param name="source">JSON string to be deserialized.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the JSON string is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.NewtonsoftDeserialize(System.Type,System.String)">
            <summary>
            Deserializes a JSON string to an object instance using the Newtonsoft Serializer.
            </summary>
            <param name="returnType">Type of the instance to be returned.</param>
            <param name="source">JSON string to be deserialized.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the JSON string is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.JsonDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            Deserializes a JSON string to an instance of type T using the DataContractJsonSerializer. This serializer is case sensitive.
            </summary>
            <typeparam name="T">Type of the instance to be returned.</typeparam>
            <param name="source">JSON string to be deserialized.</param>
            <param name="encoding">Encoding to be used for deserialization. Default value: Encoding.UTF8.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the JSON string is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.JsonDeserialize(System.Type,System.String,System.Text.Encoding)">
            <summary>
            Deserializes a JSON string to an object instance using the DataContractJsonSerializer. This serializer is case sensitive.
            </summary>
            <param name="returnType">Type of the instance to be returned.</param>
            <param name="source">JSON string to be deserialized.</param>
            <param name="encoding">Encoding to be used for deserialization. Default value: Encoding.UTF8.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the JSON string is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.JavaScriptDeserialize``1(System.String)">
            <summary>
            Deserializes a JSON string to an instance of type T using the JavaScriptSerializer. This serializer is case insensitive.
            </summary>
            <typeparam name="T">Type of the instance to be returned.</typeparam>
            <param name="source">JSON string to be deserialized.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the JSON string is null.</returns>
        </member>
        <member name="M:Dlp.Framework.Serializer.JavaScriptDeserialize(System.Type,System.String)">
            <summary>
            Deserializes a JSON string to an object instance using the JavaScriptSerializer. This serializer is case insensitive.
            </summary>
            <param name="returnType">Type of the instance to be returned.</param>
            <param name="source">JSON string to be deserialized.</param>
            <returns>Return a new instance of type T with the deserialized data, or default(T), if the JSON string is null.</returns>
        </member>
        <member name="P:Dlp.Framework.JavaScriptPropertyAttribute.Name">
            <summary>
            Gets or sets the property name when serializing.
            </summary>
        </member>
        <member name="T:Dlp.Framework.JavaScriptIgnoreAttribute">
            <summary>
            Set this attribute to avoid the member to be serialized.
            </summary>
        </member>
        <member name="T:Dlp.Framework.StringExtensions">
            <summary>
            String extension methods.
            </summary>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to a byte array.
            </summary>
            <param name="source">String to be converted.</param>
            <param name="encoding">Encoding to be used for conversion. Default value: Encoding.UTF8.</param>
            <returns>Retorn a byte array generated from the source string, or null, if the string does not have data.</returns>
            <example>
      <para>The following example shows how to convert a string to a byte array using the extension method.</para>
      <code lang="C#">
        // String to be converted to a byte array.
        string source = "source string";

        // Create a byte array from a string, using the StringExtensions.GetByte() extension method.
        byte[] data = source.GetBytes();

        // Convert the byte array back to string, using whe ByteExtensions.GetString() extension method.
        string result = data.GetString();

        Console.WriteLine(result);

        // Output: source string
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.GetDigits(System.String)">
            <summary>
            Get all the digits of the specified string.
            </summary>
            <param name="source">String to be checked.</param>
            <returns>Return a new string containing only the extracted digits.</returns>
            <example>
      <para>The following example shows how to extract only the digits of a zip code.</para>
      <code lang="C#">
        // Zip code inputed by user.
        string zipCode = "20091-005";

        // Create a new string containing only the digits.
        string rawData = zipCode.GetDigits();

        Console.WriteLine(rawData);

        // Output: 20091005
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.GetLetters(System.String)">
            <summary>
            Get all the letters of the specified string.
            </summary>
            <param name="source">String to be checked.</param>
            <returns>Return a new string containing only the extracted letters.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.GetLettersOrDigits(System.String)">
            <summary>
            Get all the letters and digits of the specified string.
            </summary>
            <param name="source">String to be checked.</param>
            <returns>Return a new string containing only the extracted letters and digits.</returns>
            <example>
      <para>The following example shows how to extract only the letters and digits of a string.</para>
      <code lang="C#">
        // Current file name without extension.
        string currentFileName = "file.101 review";

        // Create a new string containing only the digits.
        string safeFileName = currentFileName.GetLettersOrDigits();

        Console.WriteLine(rawData);

        // Output: file101review
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.Mask(System.String,Dlp.Framework.StringMaskFormat,System.Char)">
            <summary>
            Masks the content of the specified string.
            </summary>
            <param name="source">String to be masked.</param>
            <param name="stringMaskFormat">Mask format to be used.</param>
            <param name="maskCharacter">Mask character. Default character is asterisk '*'</param>
            <returns>Return a new string with masked content.</returns>
            <example>
      <para>The following example shows how to mask a credit card data using all the masks options.</para>
      <code lang="C#">
        // Current credit card number.
        string creditCardNumber = "4111111111111111";

        // Current security code.
        string cvv2 = "123";

        // Mask the current creditcard number for public display in an interface.
        string publicCreditCardNumber = creditCardNumber.Mask(StringMaskFormat.CreditCard);

        // Mask the current creditcard number to be saved in a database.
        string privateCreditCardNumber = creditCardNumber.Mask(StringMaskFormat.CreditCardExtended);

        // Mask the current security code for feedback display.
        string cvv2Masked = cvv2.Mask(StringMaskFormat.Password);

        Console.WriteLine("Masked Number:          " + publicCreditCardNumber);
        Console.WriteLine("Masked Number Extended: " + privateCreditCardNumber);
        Console.WriteLine("CVV2:                   " + cvv2Masked);
        
        /**
         * Output:
         * Masked Number:          ************1111
         * Masked Number Extended: 4111********1111
         * CVV2:                   ***
        **/
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.RemoveAccentuation(System.String)">
            <summary>
            Replaces all the accented characters with its unaccented version.
            </summary>
            <param name="source">String to be checked.</param>
            <returns>Return a new string without accented characters.</returns>
            <remarks>
      Only Latin characters are supported by this method. Use of unsuported characters will result in the interrogation mark to be used to replace the characters.
    </remarks><example>
      <para>The following example shows how to remove the accentuated characters of a string.</para>
      <code lang="C#">
        // Accentuated string.
        string source = "Acentuação";

        // New string without accents.
        string result = source.RemoveAccentuation();

        Console.WriteLine(result);

        // Output: Acentuacao
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.IsValidCpf(System.String)">
            <summary>
            Checks if the current string is a valid CPF.
            </summary>
            <param name="source">String to be checked.</param>
            <returns>Return true if the string is a valid CPF.</returns>
            <example>
      <para>The following example shows how to validate a CPF document number. The string can contain non digit characters.</para>
      <code lang="C#">
        // CPF formated string, inputed by user. Also works with unformatted data like 12312312312.
        string source = "123.123.123-12";

        // Checks if the document number is valid.
        bool result = source.IsValidCpf();
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.IsValidCnpj(System.String)">
            <summary>
            Checks if the current string is a valid CNPJ.
            </summary>
            <param name="source">String to be checked.</param>
            <returns>Return true if the string is a valid CNPJ.</returns>
            <example>
      <para>The following example shows how to validate a CNPJ document number. The string can contain non digit characters.</para>
      <code lang="C#">
        // CNPJ formated string, inputed by user. Also works with unformatted data like 12123123000112.
        string source = "12.123.123/0001-12";

        // Checks if the document number is valid.
        bool result = source.IsValidCnpj();
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.IsValidEmailAddress(System.String)">
            <summary>
            Checks if the current string has a valid email address format.
            </summary>
            <param name="source">String to be checked.</param>
            <returns>Return true if the string has a valid email address format.</returns>
            <example>
      <para>The following example shows how to validate an email address format.</para>
      <code lang="C#">
        // Email string to be validated.
        string email = "email@domain.com";

        // Checks if the email address is is a valid format.
        bool result = email.IsValidEmailAddress();
      </code>
    </example>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string using the provided secretKey.
            </summary>
            <param name="source">String to be encrypted.</param>
            <param name="secretKey">The secret key to be used for calculate the encription.</param>
            <returns>Returns the encrypted hexadecimal string.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string using the provided secretKey.
            </summary>
            <param name="source">String to be decrypted.</param>
            <param name="secretKey">The secret key used in the encrypt process.</param>
            <returns>Returns an UTF8 decrypted string.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.CalculateMd5(System.String)">
            <summary>
            Calculates the MD5 for a string.
            </summary>
            <param name="source">Source string to generate the MD5 from.</param>
            <returns>Returns the hexadecimal MD5 hash of the string.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.CalculateMd5(System.String,System.String)">
            <summary>
            Calculates the MD5 for a string.
            </summary>
            <param name="source">Source string to generate the MD5 from.</param>
            <param name="secretKey">The secret key to be used for MD5 calculation.</param>
            <returns>Returns the MD5 string.</returns>
            <exception cref="T:System.ArgumentNullException">The secretKey was not specified.</exception>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.CalculateSha512(System.String,System.String)">
            <summary>
            Calculates the hash from a string, using the SHA512 algoritm.
            </summary>
            <param name="source">Source string to generate the hash.</param>
            <param name="secretKey">Secret key used to generate the hash.</param>
            <returns>Returns the generated hashed string, or null, if the string is not valid.</returns>
            <exception cref="T:System.ArgumentNullException">The secretKey was not specified.</exception>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.CalculateSha384(System.String,System.String)">
            <summary>
            Calculates the hash from a string, using the SHA384 algoritm.
            </summary>
            <param name="source">Source string to generate the hash.</param>
            <param name="secretKey">Secret key used to generate the hash.</param>
            <returns>Returns the generated hashed string, or null, if the string is not valid.</returns>
            <exception cref="T:System.ArgumentNullException">The secretKey was not specified.</exception>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.CalculateSha256(System.String,System.String)">
            <summary>
            Calculates the hash from a string, using the SHA256 algoritm.
            </summary>
            <param name="source">Source string to generate the hash.</param>
            <param name="secretKey">Secret key used to generate the hash.</param>
            <returns>Returns the generated hashed string, or null, if the string is not valid.</returns>
            <exception cref="T:System.ArgumentNullException">The secretKey was not specified.</exception>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.CalculateSha1(System.String,System.String)">
            <summary>
            Calculates the hash from a string, using the SHA1 algoritm.
            </summary>
            <param name="source">Source string to generate the hash.</param>
            <param name="secretKey">Secret key used to generate the hash.</param>
            <returns>Returns the generated hashed string, or null, if the string is not valid.</returns>
            <exception cref="T:System.ArgumentNullException">The secretKey was not specified.</exception>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.CalculateHash(System.String,System.Security.Cryptography.HMAC)">
            <summary>
            Calculate the hash from a string, using  the provided hmac instance.
            </summary>
            <param name="source">String to be hashed.</param>
            <param name="hmac">Hmac instance to be used to calculate the hash.</param>
            <returns>Returns the hashed string.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.HexStringToByteArray(System.String)">
            <summary>
            Converts an hexadecimal string to an byte array,
            </summary>
            <param name="source">Hexadecimal string to be converted.</param>
            <returns>Returns the byte array represented by the source string, or null, if the string is not specified.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.ByteArrayToHexString(System.Byte[])">
            <summary>
            Converts a byte array to an hexadecimal string.
            </summary>
            <param name="source">Byte array to be converted.</param>
            <returns>Returns de hexadecimal string represented by the byte array, or null, if the byte array is not specified.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.AsCnpj(System.String)">
            <summary>
            Formats a string as CNPJ (00.000.000/0001-00). If the value is not a valid CNPJ, returns the original string.
            </summary>
            <param name="value">String to be formatted.</param>
            <returns>Returns the string with CNPJ format.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.AsCpf(System.String)">
            <summary>
            Formats a string as CPF (999.999.999-99). If the value is not a valid CPF, returns the original string.
            </summary>
            <param name="value">String to be formatted.</param>
            <returns>Returns the string with CPF format.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.AsPhoneNumber(System.String)">
            <summary>
            Formats a string as phone number.
            </summary>
            <param name="value">String to be formatted.</param>
            <returns>Returns the string with phone number format.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.AsZipCode(System.String)">
            <summary>
            Formats a string as ZipCode. If the value is not a valid ZipCode, returns the original string.
            </summary>
            <param name="value">String to be formatted.</param>
            <returns>Returns the formated string as ZipCode.</returns>
        </member>
        <member name="M:Dlp.Framework.StringExtensions.AsIEnumerable``1(System.String,System.Char[])">
            <summary>
            Converts a string to an IEnumerable collection.
            </summary>
            <typeparam name="T">Type of the elements of the IEnumerable.</typeparam>
            <param name="value">String containing the elements to be converted.</param>
            <param name="separators">An array of chars representing the separators that should be used to split the elements.</param>
            <returns></returns>
        </member>
        <member name="T:Dlp.Framework.StringMaskFormat">
            <summary>
            Enumerates all the available mask formats.
            </summary>
        </member>
        <member name="F:Dlp.Framework.StringMaskFormat.Password">
            <summary>
            Masks all characters.
            </summary>
        </member>
        <member name="F:Dlp.Framework.StringMaskFormat.CreditCard">
            <summary>
            Partially mask the string in a creditcard format, allowing only the last 4 digits to be seen. If the string length is less than 4, all the string is masked.
            </summary>
        </member>
        <member name="F:Dlp.Framework.StringMaskFormat.CreditCardExtended">
            <summary>
            Partially mask the string in a creditcard format, allowing the first 6 digits and the last 4 digits to be seen. The string length must be greater than 13, otherwise the CreditCard format is applied.
            </summary>
        </member>
    </members>
</doc>
